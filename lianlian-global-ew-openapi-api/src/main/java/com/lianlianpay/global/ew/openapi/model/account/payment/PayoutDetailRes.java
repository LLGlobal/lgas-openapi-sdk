package com.lianlianpay.global.ew.openapi.model.account.payment;

import com.lianlianpay.global.ew.openapi.model.common.AdditionalInfo;
import com.lianlianpay.global.ew.openapi.model.common.FeeInfo;
import com.lianlianpay.global.ew.openapi.model.common.BankInfo;
import lombok.Data;

import java.io.Serializable;
import java.util.Date;
import java.util.List;

/**
 * @author huyl
 * @since 2024/12/3
 */
@Data
public class PayoutDetailRes implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * id
     * string
     * Unique identifier of the payment.
     */
    private String id;

    /**
     * request_id
     * string
     * The idempotent value generated by the client must be unique on each request. Payout requests with the same request_id will be rejected. The parameter contains a maximum of 64 characters.
     */
    private String requestId;

    /**
     * business_order_id
     * string
     * Business Order ID.
     */
    private String businessOrderId;

    /**
     * payer_id
     * string
     * Unique identifier for the Payer Object ID.
     */
    private String payerId;

    /**
     * payee_id
     * string
     * Unique identifier for the Bank Account or Network Account Object ID.
     */
    private String payeeId;

    /**
     * payee_bank_info
     * object (Bank)
     */
    private BankInfo payeeBankInfo;

    /**
     * conversion
     * object (ConversionInfo)
     */
    private ConversionInfo conversion;

    /**
     * pay_currency
     * string
     * The currency actually paid by the payer (in three-letter ISO 4217 format).
     */
    private String payCurrency;

    /**
     * pay_amount
     * string
     * The amount actually paid by the payer, main currency unit, rounded up to 2 decimal places.
     */
    private String payAmount;

    /**
     * send_currency
     * string
     * Currency of payment to account (in three-letter ISO 4217 format).
     */
    private String sendCurrency;

    /**
     * send_amount
     * string
     * Amount paid to payee, main currency unit, rounded up to 2 decimal places.
     */
    private String sendAmount;

    /**
     * fee
     * object
     */
    private FeeInfo fee;

    /**
     * purpose
     * string
     * Purpose of payout. If the receiving currency is CNY or purpose, please select the following enumeration values.
     */
    private String purpose;

    /**
     * refund_currency
     * string
     * Return the funds to the payer's currency (in three-letter ISO 4217 format).
     */
    private String refundCurrency;

    /**
     * refund_amount
     * string
     * Return the funds to the payer's amount, main currency unit, rounded up to 2 decimal places.
     */
    private String refundAmount;

    /**
     * failure_code
     * string
     * This field occurs when an error occurs during payment.
     */
    private String failureCode;

    /**
     * failure_reason
     * string
     * This field occurs when an error occurs during payment.
     */
    private String failureReason;

    /**
     * status
     * string
     * Enum: "PROCESSING" "FAILED" "REFUNDING" "REFUNDED" "COMPLETED" Hide
     * The payout status.
     */
    private String status;

    /**
     * refunded_pre_status
     * string
     * Enum: "PROCESSING" "COMPLETED"
     * When the state reaches REFUNDED, there will be this value, indicating which state it is from to REFUNDED.
     */
    private String refundedPreStatus;

    /**
     * file_folder_id
     * string
     * The ID of File Folder object.
     */
    private String fileFolderId;

    /**
     * reference
     * string
     * This is the postscript information visible to the payee.
     */
    private String reference;

    /**
     * additional_info
     * Array of objects (Item)
     * Set of key-value pairs that you can attach the business information according to Lianlian's requirements.
     */
    private List<AdditionalInfo> additionalInfo;

    /**
     * completed_time
     * long
     * The object completed time. Measured in milliseconds since the Unix epoch. It's a long type number.
     */
    private Date completedTime;

    /**
     * refunded_time
     * long
     * The object refunded time. Measured in milliseconds since the Unix epoch. It's a long type number.
     */
    private Date refundedTime;

    /**
     * create_time
     * long
     * The object creation time. Measured in milliseconds since the Unix epoch. It's a long type number.
     */
    private Date createTime;
}
