package com.lianlianpay.global.ew.openapi.model.account.exchanges;

import lombok.Data;

import java.io.Serializable;
import java.util.Date;

/**
 * @author huyl
 * @since 2024/12/5
 */
@Data
public class ConversionDetailRes implements Serializable {

    private static final long serialVersionUID = -1L;

    /**
     * id
     * string
     * unique ID created by the LianLian Global conversion.
     */
    private String id;

    /**
     * request_id
     * string
     * The idempotent value generated by the client must be unique on each request.
     * Conversion requests with the same request_id will be rejected.
     * The parameter contains a maximum of 64 characters.
     */
    private String requestId;

    /**
     * business_order_id
     * string
     * Business Order ID.
     */
    private String businessOrderId;

    /**
     * user_id
     * string
     * Unique identifier of the User.
     */
    private String userId;

    /**
     * sell_currency
     * string
     * Sell currency, the currency that the client sells (in three-letter ISO 4217 format).
     */
    private String sellCurrency;

    /**
     * sell_amount
     * string
     * Amount in sell_currency that the client sells. Required if buy_amount is not specified.
     * Main currency unit, rounded up to 2 decimal places.
     */
    private String sellAmount;

    /**
     * buy_currency
     * string
     * Buy currency, the currency that the client buys (in three-letter ISO 4217 format).
     */
    private String buyCurrency;

    /**
     * buy_amount
     * string
     * Amount in buy_currency that the client buys. Required if sell_amount is not specified.
     * Main currency unit, rounded up to 2 decimal places.
     */
    private String buyAmount;

    /**
     * rate_id
     * string
     * The LockFX Quote is used to execute the conversion. Echoes the requestâ€™s LockFX Quote, if provided.
     */
    private String rateId;

    /**
     * rate
     * string
     * The FX Quote represents how much of the quote currency is needed for you to get one unit of the base currency.
     */
    private String rate;

    /**
     * base_currency
     * string
     * It will be either sell_currency or buy_currency.
     */
    private String baseCurrency;

    /**
     * status
     * string
     * Enum: "SETTLED" "CANCELLED" "WAITING_SETTLEMENT"
     * Status of the conversion
     */
    private String status;

    /**
     * create_time
     * long
     * The object creation time. Measured in milliseconds since the Unix epoch.
     */
    private Date createTime;
}
